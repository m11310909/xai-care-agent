// 1. 載入環境變數
require('dotenv').config();

// 2. 引入必要的套件
const { Client } = require('@notionhq/client');
const simpleGit = require('simple-git');

console.log('--- 偵錯流程開始 ---');

// =================================================================
// 步驟 A: 環境檢查 (Environment Check)
// =================================================================
console.log('\n[步驟 A] 檢查環境變數...');

const notionToken = process.env.NOTION_TOKEN;
const databaseId = process.env.NOTION_DB_ID;

console.log(`- NOTION_TOKEN 狀態: ${notionToken ? '✅ 已載入' : '❌ 遺失!'}`);
console.log(`- NOTION_DB_ID 狀態: ${databaseId ? '✅ 已載入' : '❌ 遺失!'}`);

if (!notionToken || !databaseId) {
  console.error('\n❌ 錯誤：請檢查 .env 檔案是否存在且內容正確。程式中止。');
  process.exit(1);
}

// --- 主要執行邏輯 ---
(async () => {
  try {
    const notion = new Client({ auth: notionToken });
    const git = simpleGit();

    // =================================================================
    // 步驟 B: 輸入檢查 (Input Check)
    // =================================================================
    console.log('\n[步驟 B] 正在從 simple-git 獲取資料...');
    const log = await git.log(['-1']);
    
    if (!log.latest) {
      console.warn('⚠️ 找不到任何 Git commit 紀錄，程式結束。');
      return;
    }

    const commit = log.latest;

    // 印出從 git 拿到的完整 commit 物件，讓我們看看原始資料長什麼樣
    console.log('--- Git 回傳的原始 commit 物件 ---');
    console.log(commit);
    console.log('------------------------------------');


    // =================================================================
    // 步驟 C: 輸出檢查 (Output Check)
    // =================================================================
    console.log('\n[步驟 C] 正在準備要傳送給 Notion 的資料...');
    
    // 這是最關鍵的一步，轉換日期格式
    const isoDateString = new Date(commit.date).toISOString();
    console.log(`- 原始日期: "${commit.date}"`);
    console.log(`- 轉換後的 ISO 8601 日期: "${isoDateString}"`);

    const pageProperties = {
      parent: { database_id: databaseId },
      properties: {
        'Name': { title: [{ text: { content: commit.message } }] },
        'Author': { rich_text: [{ text: { content: commit.author_name } }] },
        'Date': { date: { start: isoDateString } },
      },
    };

    // 在發送前，印出最終準備好的完整物件
    // 使用 JSON.stringify 讓巢狀物件更容易閱讀
    console.log('\n--- 最終準備傳送給 Notion API 的完整物件 ---');
    console.log(JSON.stringify(pageProperties, null, 2)); // null, 2 是為了美化 JSON 輸出
    console.log('--------------------------------------------');

    console.log('\n[步驟 D] 正在呼叫 Notion API...');
    await notion.pages.create(pageProperties);

    console.log('\n✅✅✅ 成功！操作完成！ ✅✅✅');

  } catch (error) {
    console.error('\n❌❌❌ 操作失敗，發生嚴重錯誤 ❌❌❌');
    if (error.body) {
      console.error('--- Notion API 回傳的錯誤訊息 ---');
      try {
        console.error(JSON.parse(error.body));
      } catch (e) {
        console.error(error.body);
      }
    } else {
      console.error('--- 其他錯誤訊息 ---');
      console.error(error);
    }
    process.exit(1);
  }
})();

console.log('實際讀到的 NOTION_DB_ID:', databaseId);